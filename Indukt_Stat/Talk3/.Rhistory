table(my_pisa$schoolid)
(sqrt(4500)/866.83)*0.614
1+3+2+1+3+0.5
7+10.5+11.5+13+5
8/38
0.5+1+4.5+2+2.5+1+1
13.5+7.5
0.5+1+1+4.5+2+2.5+1+1
0.5+2+0.5+1+1.5+2
1.5+1+2+3+3
1.5+2+2
11.5+16+14.5+1+10.5
53.5+5.5
4.5+1+2+2+2+1+2
0.5+2+1+2+1+2+1+2
14.5+11.5
1+2+1+1+4+2+1+1
1+1+1+3+3
3+3+2+3+3
11+14.5+13+4.5+14+3
4.5+1+4+1+3+3+1+1
0.5+1+2+1+2
18.5+6.5
1+3+1+1+5+2+1+2
1+3+2
3+1.5+1+3+1+3
1.5+1+1
12.5+18.5+16+7+12.5+4.5
3+1.5+1+4+3+1+1+1
2+1+2.5+2+2
1+2+1+0.5+5+3+0
1+0.5+4+1+1+2
12.5+9.5
3+1.5+1+3
1.5+1+2+3
12+15.5+12.5+6+8.5+4
5+1+4+1+2.5+1+1+1
1.5+3+2+2
16.5+8.5
1+3+0.5+1+4+2+3+1
0.5+1+1+1+1+2
15.5+6.5
3+1.5+1+3+1+3
10+16.5+15.5+12.5+1
1+3+1+3+3+1+1
5+1+1+2+2
1+1+1+5+3+1
3+4+1+1+1
3+3+2+3
11+14+12+11+4.5
5+1+4+3.5+3+1
1.5+2+1+3
17.5+7.5
1+3+1+1+2+2+1+1+2
5+1+2+1+1+2
22-8
3+2+2+3+3
1+2
12+17.5+14+13+6
25-3.5
5+1+4+1+4+2+0.5+1+1+2
12+21.5+20+6+15+6
5+1+4+1+4+0.5+2
3.5+2
17.5+5.5
1+2+1+1+5+2.5+3.5+1+2
12+17.5+19+1.5+3+0
12+17.5+19+2+3
5+1+41+3
22-3.5
13+23+18.5+4+15+4
1+1+4+3+1+1+2+1+3
4+1+1+2+0
1+3+1+1+4+3+2+1+0.5+1
3+2+2+3+1+3
10+17+17.5+3+14+5.5
13+23+20+5+13.5+6
25-2.5
22-1.5
12+22.5+20.5+4+14+6
24+29
2.5+6.5+5+5+2+8+14+2.5+5+4+0
6.5+9.5+5+7+5+4+13+5+9+2+6
6+9.5+5+7+5+4+13.5+5+9+2+6
6.5+8.5+4.5+4.5+3.5+7+14+4+6.5+4+5
120/9
library(haven)
Th�_ringen_Monitor_2015_2017_03_01_14 <- read_sav("~/Methoden/MethodenII/Thüringen-Monitor 2015 2017-03-01-14.zip")
View(Th�_ringen_Monitor_2015_2017_03_01_14)
library(haven)
TM_2015_Final_2015_07_16 <- read_sav("~/Methoden/MethodenII/TM-2015 Final 2015-07-16.sav")
View(TM_2015_Final_2015_07_16)
TM_2015_Final_2015_07_16 <- read_sav("~/Methoden/MethodenII/TM-2015 Final 2015-07-16.sav")->final_monithor15
write.dta(final_monithor15, "final_monithor15.dta")
library("Rcmdr")
install.packages("Rcmdr")
library("Rcmdr")
write.dta(final_monithor15, "final_monithor15.dta")
library("Rcmdr")
write.dta(final_monithor15, "final_monithor15.dta")
library("foreign")
write.dta(final_monithor15, "final_monithor15.dta")
getwd()
View(final_monithor15)
71+19
12+17+13+3+13.5+6
58.5+6
12.5+20+18.5+4+13+4
8+10+5+7+6+9+13+8+7+6+8
8+10+5+7+6+9+16+8+7+6+8
4+5+4+5+6+9+7+6+4+3.5+7
3+5+5+4+4+6+8+4+1+2+8
2.5+9+2.5+4+3+9+15+5+4+2+5
2.5+10+4+5.5+3+5+5+4+5+2+6
set.seed(456456)
n <- 100000
mu1 <- 0
sd1 <- 1
mu2 <- 0.8 # i.e. cohen's d = 0.8
sd2 <- 1
xs <- seq(min(mu1 - 3*sd1, mu2 - 3*sd2), max(mu1 + 3*sd1, mu2 + 3*sd2), length.out=n)
f1 <- dnorm(xs, mean=mu1, sd=sd1) # dist1
f2 <- dnorm(xs, mean=mu2, sd=sd2) # dist2
ps <- matrix(c(runif(n, min(xs), max(xs)), runif(n, min=0, max=max(f1,f2)) ), ncol=2) # sample x,y from uniform dist
z1<- ps[,2] <= dnorm(ps[,1], mu1, sd1) # dist1
z2<- ps[,2] <= dnorm(ps[,1], mu2, sd2) # dist 2
z12 <- z1 | z2 # both dists
z3 <- ps[,2] <= pmin(dnorm(ps[,1], mu1, sd1), dnorm(ps[,1], mu2, sd2)) # overlap
# plot
plot(ps[!z12, 1], ps[!z12, 2], col='#137072', pch=20, ylim=c(0, max(f1,f2)), xlim=range(xs), xlab="", ylab="")
points(ps[z1,1], ps[z1,2], col="#FBFFC0")
points(ps[z2,1], ps[z2,2], col="#56B292")
points(ps[z3, 1], ps[z3,2], col="#BF223D")
lines(xs, f1, lwd=2)
lines(xs, f2, lty="dotted",lwd=2)
ES <- 0.8
# get mean2 depending on value of ES from d = (u1 - u2)/sd
mean1 <- ES*1 + 1
# create x sequence
x <- seq(1 - 3*1, mean1 + 3*1, .01)
# generate normal dist #1
y1 <- dnorm(x, 1, 1)
# put in data frame
df1 <- data.frame("x" = x, "y" = y1)
# generate normal dist #2
y2 <- dnorm(x, mean1, 1)
# put in data frame
df2 <- data.frame("x" = x, "y" = y2)
# get y values under overlap
y.poly <- pmin(y1,y2)
# put in data frame
poly <- data.frame("x" = x, "y" = y.poly)
# Cohen's U3, proportion of control > 50th perc. treatment
u3 <- 1 - pnorm(1, mean1,1)
u3 <- round(u3,3)
# plot with ggplot2
ggplot(df1, aes(x,y, color="treatment")) +
# add line for treatment group
geom_line(size=1) +
# add line for control group
geom_line(data=df2, aes(color="control"),size=1) +
# shade overlap
geom_polygon(aes(color=NULL), data=poly, fill="red", alpha=I(4/10),
show_guide=F) +
# add vlines for group means
geom_vline(xintercept = 1, linetype="dotted") +
geom_vline(xintercept = mean1, linetype="dotted") +
# add plot title
opts(title=paste("Visualizing Effect Sizes
(Cohen's d = ",ES,"; U3 = ",u3,")", sep="")) +
# change colors and legend annotation
scale_color_manual("Group",
values= c("treatment" = "black","control" = "red")) +
# remove axis labels
ylab(NULL) + xlab(NULL)
require("ggplot2")
# http://rpsychologist.com/short-r-script-to-plot-effect-sizes-cohens-d-and-shade-overlapping-area
# Standardized Mean Difference (Cohen's d)
ES <- 0.8
# get mean2 depending on value of ES from d = (u1 - u2)/sd
mean1 <- ES*1 + 1
# create x sequence
x <- seq(1 - 3*1, mean1 + 3*1, .01)
# generate normal dist #1
y1 <- dnorm(x, 1, 1)
# put in data frame
df1 <- data.frame("x" = x, "y" = y1)
# generate normal dist #2
y2 <- dnorm(x, mean1, 1)
# put in data frame
df2 <- data.frame("x" = x, "y" = y2)
# get y values under overlap
y.poly <- pmin(y1,y2)
# put in data frame
poly <- data.frame("x" = x, "y" = y.poly)
# Cohen's U3, proportion of control > 50th perc. treatment
u3 <- 1 - pnorm(1, mean1,1)
u3 <- round(u3,3)
# plot with ggplot2
ggplot(df1, aes(x,y, color="treatment")) +
# add line for treatment group
geom_line(size=1) +
# add line for control group
geom_line(data=df2, aes(color="control"),size=1) +
# shade overlap
geom_polygon(aes(color=NULL), data=poly, fill="red", alpha=I(4/10),
show_guide=F) +
# add vlines for group means
geom_vline(xintercept = 1, linetype="dotted") +
geom_vline(xintercept = mean1, linetype="dotted") +
# add plot title
opts(title=paste("Visualizing Effect Sizes
(Cohen's d = ",ES,"; U3 = ",u3,")", sep="")) +
# change colors and legend annotation
scale_color_manual("Group",
values= c("treatment" = "black","control" = "red")) +
# remove axis labels
ylab(NULL) + xlab(NULL)
install.packages("ggplot2")
require("ggplot2")
# http://rpsychologist.com/short-r-script-to-plot-effect-sizes-cohens-d-and-shade-overlapping-area
# Standardized Mean Difference (Cohen's d)
ES <- 0.8
# get mean2 depending on value of ES from d = (u1 - u2)/sd
mean1 <- ES*1 + 1
# create x sequence
x <- seq(1 - 3*1, mean1 + 3*1, .01)
# generate normal dist #1
y1 <- dnorm(x, 1, 1)
# put in data frame
df1 <- data.frame("x" = x, "y" = y1)
# generate normal dist #2
y2 <- dnorm(x, mean1, 1)
# put in data frame
df2 <- data.frame("x" = x, "y" = y2)
# get y values under overlap
y.poly <- pmin(y1,y2)
# put in data frame
poly <- data.frame("x" = x, "y" = y.poly)
# Cohen's U3, proportion of control > 50th perc. treatment
u3 <- 1 - pnorm(1, mean1,1)
u3 <- round(u3,3)
# plot with ggplot2
ggplot(df1, aes(x,y, color="treatment")) +
# add line for treatment group
geom_line(size=1) +
# add line for control group
geom_line(data=df2, aes(color="control"),size=1) +
# shade overlap
geom_polygon(aes(color=NULL), data=poly, fill="red", alpha=I(4/10),
show_guide=F) +
# add vlines for group means
geom_vline(xintercept = 1, linetype="dotted") +
geom_vline(xintercept = mean1, linetype="dotted") +
# add plot title
opts(title=paste("Visualizing Effect Sizes
(Cohen's d = ",ES,"; U3 = ",u3,")", sep="")) +
# change colors and legend annotation
scale_color_manual("Group",
values= c("treatment" = "black","control" = "red")) +
# remove axis labels
ylab(NULL) + xlab(NULL)
plot(ps[!z12, 1], ps[!z12, 2], col='#137072', pch=20, ylim=c(0, max(f1,f2)), xlim=range(xs), xlab="", ylab="")
# http://rpsychologist.com/calculating-the-overlap-of-two-normal-distributions-using-monte-carlo-integration
# Wie hoch ist W'keit, dass X < Y ?
set.seed(456456)
n <- 100000
mu1 <- 0
sd1 <- 1
mu2 <- 0.8 # i.e. cohen's d = 0.8
sd2 <- 1
xs <- seq(min(mu1 - 3*sd1, mu2 - 3*sd2), max(mu1 + 3*sd1, mu2 + 3*sd2), length.out=n)
f1 <- dnorm(xs, mean=mu1, sd=sd1) # dist1
f2 <- dnorm(xs, mean=mu2, sd=sd2) # dist2
ps <- matrix(c(runif(n, min(xs), max(xs)), runif(n, min=0, max=max(f1,f2)) ), ncol=2) # sample x,y from uniform dist
z1<- ps[,2] <= dnorm(ps[,1], mu1, sd1) # dist1
z2<- ps[,2] <= dnorm(ps[,1], mu2, sd2) # dist 2
z12 <- z1 | z2 # both dists
z3 <- ps[,2] <= pmin(dnorm(ps[,1], mu1, sd1), dnorm(ps[,1], mu2, sd2)) # overlap
plot(ps[!z12, 1], ps[!z12, 2], col='#137072', pch=20, ylim=c(0, max(f1,f2)), xlim=range(xs), xlab="", ylab="")
plot(ps[!z12, 1], ps[!z12, 2],col="lightgray" , pch=20, ylim=c(0, max(f1,f2)), xlim=range(xs), xlab="", ylab="")#col='#137072'
points(ps[z1,1], ps[z1,2], col="#FBFFC0")
points(ps[z2,1], ps[z2,2], col="#56B292")
points(ps[z3, 1], ps[z3,2], col="#BF223D")
lines(xs, f1, lwd=2)
lines(xs, f2, lty="dotted",lwd=2)
getwd()
setwd("C:/Users/zo95yup/Documents/GitHub/StatII_Soziologie_Jena/Indukt_Stat/Talk3")
plot("overlap1.pdf")
plot(ps[!z12, 1], ps[!z12, 2],col="lightgray" , pch=20, ylim=c(0, max(f1,f2)), xlim=range(xs), xlab="", ylab="")#col='#137072'
points(ps[z1,1], ps[z1,2], col="#FBFFC0")
points(ps[z2,1], ps[z2,2], col="#56B292")
points(ps[z3, 1], ps[z3,2], col="#BF223D")
lines(xs, f1, lwd=2)
lines(xs, f2, lty="dotted",lwd=2)
dev.off()
pdf("overlap1.pdf")
plot(ps[!z12, 1], ps[!z12, 2],col="lightgray" , pch=20, ylim=c(0, max(f1,f2)), xlim=range(xs), xlab="", ylab="")#col='#137072'
points(ps[z1,1], ps[z1,2], col="#FBFFC0")
points(ps[z2,1], ps[z2,2], col="#56B292")
points(ps[z3, 1], ps[z3,2], col="#BF223D")
lines(xs, f1, lwd=2)
lines(xs, f2, lty="dotted",lwd=2)
dev.off()
# http://rpsychologist.com/calculating-the-overlap-of-two-normal-distributions-using-monte-carlo-integration
# Wie hoch ist W'keit, dass X < Y ?
set.seed(456456)
n <- 100000
mu1 <- 200
sd1 <- 10
mu2 <- 300 # i.e. cohen's d = 0.8
sd2 <- 10
xs <- seq(min(mu1 - 3*sd1, mu2 - 3*sd2), max(mu1 + 3*sd1, mu2 + 3*sd2), length.out=n)
f1 <- dnorm(xs, mean=mu1, sd=sd1) # dist1
f2 <- dnorm(xs, mean=mu2, sd=sd2) # dist2
ps <- matrix(c(runif(n, min(xs), max(xs)), runif(n, min=0, max=max(f1,f2)) ), ncol=2) # sample x,y from uniform dist
z1<- ps[,2] <= dnorm(ps[,1], mu1, sd1) # dist1
z2<- ps[,2] <= dnorm(ps[,1], mu2, sd2) # dist 2
z12 <- z1 | z2 # both dists
z3 <- ps[,2] <= pmin(dnorm(ps[,1], mu1, sd1), dnorm(ps[,1], mu2, sd2)) # overlap
# plot
pdf("overlap2.pdf")
plot(ps[!z12, 1], ps[!z12, 2],col="lightgray" , pch=20, ylim=c(0, max(f1,f2)), xlim=range(xs), xlab="", ylab="")#col='#137072'
points(ps[z1,1], ps[z1,2], col="#FBFFC0")
points(ps[z2,1], ps[z2,2], col="#56B292")
points(ps[z3, 1], ps[z3,2], col="#BF223D")
lines(xs, f1, lwd=2)
lines(xs, f2, lty="dotted",lwd=2)
dev.off()
# http://rpsychologist.com/calculating-the-overlap-of-two-normal-distributions-using-monte-carlo-integration
# Wie hoch ist W'keit, dass X < Y ?
set.seed(456456)
n <- 100000
mu1 <- 200
sd1 <- 25
mu2 <- 300 # i.e. cohen's d = 0.8
sd2 <- 25
xs <- seq(min(mu1 - 3*sd1, mu2 - 3*sd2), max(mu1 + 3*sd1, mu2 + 3*sd2), length.out=n)
f1 <- dnorm(xs, mean=mu1, sd=sd1) # dist1
f2 <- dnorm(xs, mean=mu2, sd=sd2) # dist2
ps <- matrix(c(runif(n, min(xs), max(xs)), runif(n, min=0, max=max(f1,f2)) ), ncol=2) # sample x,y from uniform dist
z1<- ps[,2] <= dnorm(ps[,1], mu1, sd1) # dist1
z2<- ps[,2] <= dnorm(ps[,1], mu2, sd2) # dist 2
z12 <- z1 | z2 # both dists
z3 <- ps[,2] <= pmin(dnorm(ps[,1], mu1, sd1), dnorm(ps[,1], mu2, sd2)) # overlap
# plot
pdf("overlap3.pdf")
plot(ps[!z12, 1], ps[!z12, 2],col="lightgray" , pch=20, ylim=c(0, max(f1,f2)), xlim=range(xs), xlab="", ylab="")#col='#137072'
points(ps[z1,1], ps[z1,2], col="#FBFFC0")
points(ps[z2,1], ps[z2,2], col="#56B292")
points(ps[z3, 1], ps[z3,2], col="#BF223D")
lines(xs, f1, lwd=2)
lines(xs, f2, lty="dotted",lwd=2)
dev.off()
pdf("overlap3.pdf")
plot(ps[!z12, 1], ps[!z12, 2],col="lightgray" , pch=20, ylim=c(0, max(f1,f2)), xlim=range(xs), xlab="", ylab="")#col='#137072'
points(ps[z1,1], ps[z1,2], col="#FBFFC0")
points(ps[z2,1], ps[z2,2], col="#56B292")
points(ps[z3, 1], ps[z3,2], col="#BF223D")
lines(xs, f1, lwd=2)
lines(xs, f2, ,lwd=2)
dev.off()
pdf("overlap3.pdf")
plot(ps[!z12, 1], ps[!z12, 2],col="lightgray" , pch=20, ylim=c(0, max(f1,f2)), xlim=range(xs), xlab="", ylab="")#col='#137072'
points(ps[z1,1], ps[z1,2], col="#FBFFC0")
points(ps[z2,1], ps[z2,2], col="#56B292")
points(ps[z3, 1], ps[z3,2], col="#BF223D")
lines(xs, f1, lwd=2)
lines(xs, f2, ,lwd=2)
dev.off()
pdf("overlap3.pdf")
plot(ps[!z12, 1], ps[!z12, 2],col="lightgray" , pch=20, ylim=c(0, max(f1,f2)), xlim=range(xs), xlab="", ylab="")#col='#137072'
points(ps[z1,1], ps[z1,2], col="#FBFFC0")
points(ps[z2,1], ps[z2,2], col="#56B292")
points(ps[z3, 1], ps[z3,2], col="#BF223D")
lines(xs, f1, lwd=2)
lines(xs, f2, ,lwd=2)
dev.off()
pdf("overlap3.pdf")
plot(ps[!z12, 1], ps[!z12, 2],col="lightgray" , pch=20, ylim=c(0, max(f1,f2)),
xlim=range(xs), xlab="", ylab="",cex.lab=2)#col='#137072'
points(ps[z1,1], ps[z1,2], col="#FBFFC0")
points(ps[z2,1], ps[z2,2], col="#56B292")
points(ps[z3, 1], ps[z3,2], col="#BF223D")
lines(xs, f1, lwd=2)
lines(xs, f2, lwd=2)
abline(v=mu1)
abline(v=mu2)
dev.off()
pdf("overlap3.pdf")
plot(ps[!z12, 1], ps[!z12, 2],col="lightgray" , pch=20, ylim=c(0, max(f1,f2)),
xlim=range(xs), xlab="", ylab="",cex.lab=2, cex.axis=2)#col='#137072'
points(ps[z1,1], ps[z1,2], col="#FBFFC0")
points(ps[z2,1], ps[z2,2], col="#56B292")
points(ps[z3, 1], ps[z3,2], col="#BF223D")
lines(xs, f1, lwd=2)
lines(xs, f2, lwd=2)
abline(v=mu1)
abline(v=mu2)
dev.off()
# http://rpsychologist.com/calculating-the-overlap-of-two-normal-distributions-using-monte-carlo-integration
# Wie hoch ist W'keit, dass X < Y ?
set.seed(456456)
n <- 100000
mu1 <- 200
sd1 <- 40
mu2 <- 300 # i.e. cohen's d = 0.8
sd2 <- 40
xs <- seq(min(mu1 - 3*sd1, mu2 - 3*sd2), max(mu1 + 3*sd1, mu2 + 3*sd2), length.out=n)
f1 <- dnorm(xs, mean=mu1, sd=sd1) # dist1
f2 <- dnorm(xs, mean=mu2, sd=sd2) # dist2
ps <- matrix(c(runif(n, min(xs), max(xs)), runif(n, min=0, max=max(f1,f2)) ), ncol=2) # sample x,y from uniform dist
z1<- ps[,2] <= dnorm(ps[,1], mu1, sd1) # dist1
z2<- ps[,2] <= dnorm(ps[,1], mu2, sd2) # dist 2
z12 <- z1 | z2 # both dists
z3 <- ps[,2] <= pmin(dnorm(ps[,1], mu1, sd1), dnorm(ps[,1], mu2, sd2)) # overlap
# plot
pdf("overlap4.pdf")
plot(ps[!z12, 1], ps[!z12, 2],col="lightgray" , pch=20, ylim=c(0, max(f1,f2)),
xlim=range(xs), xlab="", ylab="",cex.lab=2, cex.axis=2)#col='#137072'
points(ps[z1,1], ps[z1,2], col="#FBFFC0")
points(ps[z2,1], ps[z2,2], col="#56B292")
points(ps[z3, 1], ps[z3,2], col="#BF223D")
lines(xs, f1, lwd=2)
lines(xs, f2, lwd=2)
abline(v=mu1)
abline(v=mu2)
dev.off()
# http://rpsychologist.com/calculating-the-overlap-of-two-normal-distributions-using-monte-carlo-integration
# Wie hoch ist W'keit, dass X < Y ?
set.seed(456456)
n <- 100000
mu1 <- 200
sd1 <- 60
mu2 <- 300 # i.e. cohen's d = 0.8
sd2 <- 60
xs <- seq(min(mu1 - 3*sd1, mu2 - 3*sd2), max(mu1 + 3*sd1, mu2 + 3*sd2), length.out=n)
f1 <- dnorm(xs, mean=mu1, sd=sd1) # dist1
f2 <- dnorm(xs, mean=mu2, sd=sd2) # dist2
ps <- matrix(c(runif(n, min(xs), max(xs)), runif(n, min=0, max=max(f1,f2)) ), ncol=2) # sample x,y from uniform dist
z1<- ps[,2] <= dnorm(ps[,1], mu1, sd1) # dist1
z2<- ps[,2] <= dnorm(ps[,1], mu2, sd2) # dist 2
z12 <- z1 | z2 # both dists
z3 <- ps[,2] <= pmin(dnorm(ps[,1], mu1, sd1), dnorm(ps[,1], mu2, sd2)) # overlap
# plot
pdf("overlap5.pdf")
plot(ps[!z12, 1], ps[!z12, 2],col="lightgray" , pch=20, ylim=c(0, max(f1,f2)),
xlim=range(xs), xlab="", ylab="",cex.lab=2, cex.axis=2)#col='#137072'
points(ps[z1,1], ps[z1,2], col="#FBFFC0")
points(ps[z2,1], ps[z2,2], col="#56B292")
points(ps[z3, 1], ps[z3,2], col="#BF223D")
lines(xs, f1, lwd=2)
lines(xs, f2, lwd=2)
abline(v=mu1)
abline(v=mu2)
dev.off()
# http://rpsychologist.com/calculating-the-overlap-of-two-normal-distributions-using-monte-carlo-integration
# Wie hoch ist W'keit, dass X < Y ?
set.seed(456456)
n <- 100000
mu1 <- 200
sd1 <- 80
mu2 <- 300 # i.e. cohen's d = 0.8
sd2 <- 80
xs <- seq(min(mu1 - 3*sd1, mu2 - 3*sd2), max(mu1 + 3*sd1, mu2 + 3*sd2), length.out=n)
f1 <- dnorm(xs, mean=mu1, sd=sd1) # dist1
f2 <- dnorm(xs, mean=mu2, sd=sd2) # dist2
ps <- matrix(c(runif(n, min(xs), max(xs)), runif(n, min=0, max=max(f1,f2)) ), ncol=2) # sample x,y from uniform dist
z1<- ps[,2] <= dnorm(ps[,1], mu1, sd1) # dist1
z2<- ps[,2] <= dnorm(ps[,1], mu2, sd2) # dist 2
z12 <- z1 | z2 # both dists
z3 <- ps[,2] <= pmin(dnorm(ps[,1], mu1, sd1), dnorm(ps[,1], mu2, sd2)) # overlap
# plot
pdf("overlap6.pdf")
plot(ps[!z12, 1], ps[!z12, 2],col="lightgray" , pch=20, ylim=c(0, max(f1,f2)),
xlim=range(xs), xlab="", ylab="",cex.lab=2, cex.axis=2)#col='#137072'
points(ps[z1,1], ps[z1,2], col="#FBFFC0")
points(ps[z2,1], ps[z2,2], col="#56B292")
points(ps[z3, 1], ps[z3,2], col="#BF223D")
lines(xs, f1, lwd=2)
lines(xs, f2, lwd=2)
abline(v=mu1)
abline(v=mu2)
dev.off()
# http://rpsychologist.com/calculating-the-overlap-of-two-normal-distributions-using-monte-carlo-integration
# Wie hoch ist W'keit, dass X < Y ?
set.seed(456456)
n <- 100000
mu1 <- 220
sd1 <- 40
mu2 <- 280 # i.e. cohen's d = 0.8
sd2 <- 40
xs <- seq(min(mu1 - 3*sd1, mu2 - 3*sd2), max(mu1 + 3*sd1, mu2 + 3*sd2), length.out=n)
f1 <- dnorm(xs, mean=mu1, sd=sd1) # dist1
f2 <- dnorm(xs, mean=mu2, sd=sd2) # dist2
ps <- matrix(c(runif(n, min(xs), max(xs)), runif(n, min=0, max=max(f1,f2)) ), ncol=2) # sample x,y from uniform dist
z1<- ps[,2] <= dnorm(ps[,1], mu1, sd1) # dist1
z2<- ps[,2] <= dnorm(ps[,1], mu2, sd2) # dist 2
z12 <- z1 | z2 # both dists
z3 <- ps[,2] <= pmin(dnorm(ps[,1], mu1, sd1), dnorm(ps[,1], mu2, sd2)) # overlap
# plot
pdf("overlap7.pdf")
plot(ps[!z12, 1], ps[!z12, 2],col="lightgray" , pch=20, ylim=c(0, max(f1,f2)),
xlim=range(xs), xlab="", ylab="",cex.lab=2, cex.axis=2)#col='#137072'
points(ps[z1,1], ps[z1,2], col="#FBFFC0")
points(ps[z2,1], ps[z2,2], col="#56B292")
points(ps[z3, 1], ps[z3,2], col="#BF223D")
lines(xs, f1, lwd=2)
lines(xs, f2, lwd=2)
abline(v=mu1)
abline(v=mu2)
dev.off()
